name: Publish Daily YouTube Short

on:
  workflow_dispatch: # Permet de déclencher le workflow manuellement
  schedule:
    # Exécute le workflow tous les jours 1 fois dans l'après-midi
    # Ajustez selon votre fuseau horaire.
    - cron: '0 17 * * *'

jobs:
  publish-short:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Ou une version compatible que vous préférez

    - name: Install system dependencies (ffmpeg, ImageMagick)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg imagemagick

    - name: Configure ImageMagick policy
      run: |
        POLICY_FILE="/etc/ImageMagick-6/policy.xml"
        
        sudo cp $POLICY_FILE ${POLICY_FILE}.bak
        
        # CORRECTION ICI : Utilisation de '#' comme délimiteur pour sed
        sudo sed -i 's#<policy domain="\([^"]*\)" rights="none" pattern="\([^"]*\)"\/>#<policy domain="\1" rights="read|write" pattern="\2"\/>#g' $POLICY_FILE
        
        sudo sed -i '/<policy domain="coder" rights="none" pattern="[^"]*"\/>/d' $POLICY_FILE
        
        echo "ImageMagick policy updated."

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip list | grep -E "moviepy|scikit-image|Pillow|setuptools|wheel" # Ajoutez setuptools et wheel ici

    # --- ÉTAPE DE DÉBOGAGE : AFFICHE LE FICHIER process_video.py ---
    - name: Print process_video.py content for debugging
      run: |
        echo "Content of scripts/process_video.py:"
        cat scripts/process_video.py
    # --- FIN DE L'ÉTAPE DE DÉBOGAGE ---

    - name: Create client_secret.json from secret
      run: |
        echo '${{ secrets.GOOGLE_CLIENT_SECRET_JSON }}' > client_secret.json
      env:
        GOOGLE_CLIENT_SECRET_JSON: ${{ secrets.GOOGLE_CLIENT_SECRET_JSON }}

    - name: Create token.json from secret (for YouTube API)
      run: |
        echo '${{ secrets.YOUTUBE_API_TOKEN_JSON }}' > token.json
      env:
        YOUTUBE_API_TOKEN_JSON: ${{ secrets.YOUTUBE_API_TOKEN_JSON }}

    - name: Run main script
      run: python main.py
      env:
        TWITCH_CLIENT_ID: ${{ secrets.TWITCH_CLIENT_ID }}
        TWITCH_CLIENT_SECRET: ${{ secrets.TWITCH_CLIENT_SECRET }}
        # Si vous utilisez GOOGLE_APPLICATION_CREDENTIALS, décommentez et ajustez:
        # GOOGLE_APPLICATION_CREDENTIALS: client_secret.json

    - name: Upload processed video as artifact # NOUVELLE ÉTAPE : Sauvegarde la vidéo traitée
      uses: actions/upload-artifact@v4
      with:
        name: processed-youtube-short
        path: data/temp_processed_short.mp4 # Assurez-vous que ce chemin est correct
        if-no-files-found: warn # Ne fait pas échouer le workflow si le fichier n'est pas trouvé
